#DHCPD_CONF TEMPLATE

option domain-name-servers {{ dns_server }} ;
{% if ddns %}
#DDNS Setup
option domain-name "{{ domain_name }}";
ddns-updates           on;
ddns-update-style      interim;
ignore                  client-updates;
update-static-leases    on;
include "/etc/dhcp/ddns.key";
zone {{ domain_name }} {
 primary {{ dns_server }};
 key DDNS_UPDATE;
}
zone 16.10.in-addr.arpa. {
 primary {{ dns_server }};
 key DDNS_UPDATE;
}
{% endif %}

{% if bootp %}
#BOOTP Stuff
set vendorclass = option vendor-class-identifier;
option client-system-arch code 93 = unsigned integer 16;
allow booting;
allow bootp;
option option-128 code 128= string;
option option-129 code 129= text;
next-server {{next_server}};
filename "{{bootp_file}}";
{% endif %}


#Generic Settings
default-lease-time {{default_lease_time}};
max-lease-time {{max_lease_time}};
{% if authoritative %} authoritative; {% endif %}
log-facility local7;

{% for networks in subnets %}

subnet {{ networks| ansible.netcommon.ipaddr('network') }} netmask {{ networks| ansible.netcommon.ipaddr('netmask') }}
{
  option routers {{ networks| ansible.netcommon.ipaddr('1') | ansible.netcommon.ipv4('address')}};
  option broadcast-address {{ networks| ansible.netcommon.ipaddr('broadcast') }};
  option subnet-mask {{ networks| ansible.netcommon.ipaddr('netmask') }};
  range {{ networks | ansible.netcommon.ipaddr('2') | ansible.netcommon.ipv4('address') }} {{ networks | ansible.netcommon.ipaddr('-1') | ansible.netcommon.ipv4('address')}};
  default-lease-time {{ default_lease_time }};
}
  
{% endfor %}


